// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int initAddress;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        let initAddress = 16384;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;

        do Screen.clearScreen();

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = initAddress;
        while (i < (32 * 256)) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = true;
        } else {
            let color = false;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int wordValue;
        var int xinWord;

        let address = initAddress + ((y * 32) + (x / 16));
        let wordValue = Memory.peek(address);
        let xinWord = twoToThe[x & 15]; // 0 <= xinWord <= 15
        if (color) {
            let wordValue = wordValue | xinWord;
        } else {
            let wordValue = wordValue & ~xinWord;
        }

        do Memory.poke(address, wordValue);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy;
        var int tmp;
        var int dx_abs, dy_abs;
        var int adyMinusbdx;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let dx_abs = Math.abs(dx);
        let dy_abs = Math.abs(dy);

        if ((dx = 0) & (dy = 0)) {
            return;
        }

        // when x1 = x2
        if (dx = 0) {
            do Screen.drawVerticalLine(x1, y1, y2);
            return;
        }

        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }

        // x1 != x2 && y1 != y2
        if (dx_abs > dy_abs) {
            let adyMinusbdx = -1;
        } else {
            let adyMinusbdx = 1;
        }

        while (~(Math.abs(a) > dx_abs) & ~(Math.abs(b) > dy_abs)) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if (adyMinusbdx < 0) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                let adyMinusbdx = adyMinusbdx + dy_abs;
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                let adyMinusbdx = adyMinusbdx - dx_abs;
            }
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int a, tmp;

        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }

        let a = 0;
        while (~((x1 + a) > x2)) {
            do Screen.drawPixel(x1 + a, y);
            let a = a + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2) {
        var int b, tmp;

        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }

        let b = 0;
        while (~((y1 + b) > y2)) {
            do Screen.drawPixel(x, y1 + b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dy = -r;

        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
