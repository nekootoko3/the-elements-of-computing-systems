// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array memory;
    static Array heapBase;
    static Array linkedList;

    /** Initializes the class. */
    function void init() {
        let memory   = 0;
        let heapBase = 2048;
        let linkedList    = 2048;
        let linkedList[0] = 14336;
        let linkedList[1] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int length, res;
        var Array currentList;
        var boolean exit;

        let res = 0;
        let currentList = linkedList;
        let exit = false;
        while (~(currentList = null) & (~(exit))) {
            let length = currentList[0];
            if (length > size) {
                let res = currentList + (length - size);
                let currentList[length - size - 1] = size;
                let exit = true;
            } else {
                let currentList = currentList[1];
            }
        }

        return res;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array currentList;

        let o[0] = null;
        let currentList = linkedList;
        while (~(currentList[1] = null)) {
            if (currentList[1] = null) {
                let currentList[1] = o;
            }
            let currentList = currentList[1];
        }
        return;
    }
}
