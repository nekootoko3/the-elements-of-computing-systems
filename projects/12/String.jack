// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character array. In addition for constructing and disposing
 * array, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int last, maxLength;
    field Array array;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let last = 0;
        let maxLength = maxLength;
        if (~(maxLength = 0)) {
            let array = Array.new(maxLength);
        }

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(maxLength = 0)) {
            do Memory.deAlloc(this);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return last;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[last] = c;
        let last = last + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (last > 0) {
            let last = last - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, res;
        var boolean exit, negative;

        if (last = 0) {
            return 0;
        }

        let i = 0;
        let negative = false;
        if (array[0] = 45) {
            let negative = true;
            let i = 1;
        }

        let res = 0;
        let exit = false;
        while (i < last & ~(exit)) {
            if ((array[i] < 48) & (array[i] > 57)) {
                let exit = true;
            } else {
                let res = res * 10;
                let res = res + (array[i] - 48);
            }

            let i = i + 1;
        }

        if (negative) {
            let res = res * -1;
        }

        return res;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let last = 0;

        if (val < 0) {
            let array[0] = 45;
            let last = last + 1;
            let val = val * -1;
        }

        do intToString(val);

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    method int convertCharToInt(char value) {
        if (value < 10) {
            return value + 48;
        }

        return value;
    }

    method void intToString(int val) {
        var int tmp, lastDigit;

        if (val = 0) {
            return;
        }

        let lastDigit = val - (val / 10 * 10);

        do intToString(val/10);

        let array[last] = lastDigit + 48;
        let last = last + 1;
        return;
    }
}
