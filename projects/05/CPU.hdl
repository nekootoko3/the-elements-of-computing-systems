// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // decide A register input
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=ain);

    // set A register or not
    Mux(a=false, b=true, sel=instruction[5], out=loada0);
    Mux(a=true, b=loada0, sel=instruction[15], out=loada1);
    ARegister(in=ain, load=loada1, out=aout, out[0..14]=addressM);

    // A or M
    Mux(a=false, b=true, sel=instruction[12], out=selaorm0);
    Mux(a=true, b=selaorm0, sel=instruction[15], out=selaorm1);
    Mux16(a=aout, b=inM, sel=selaorm1, out=aormout);

    // set D register or not
    Mux(a=false, b=true, sel=instruction[15], out=loadd0);
    Mux(a=false, b=loadd0, sel=instruction[4], out=loadd1);
    DRegister(in=aluout, load=loadd1, out=dout);

    // ALU computation
    ALU(x=dout, y=aormout, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=aluout, out=outM, zr=zr, ng=ng);

    // writeM or not
    Mux(a=false, b=true, sel=instruction[15], out=writeM0);
    Mux(a=false, b=writeM0, sel=instruction[3], out=writeM);

    // set PC
    Mux(a=false, b=ng, sel=instruction[2], out=pcl0);
    Mux(a=false, b=zr, sel=instruction[1], out=pcl1);
    Or(a=ng, b=zr, out=le);
    Not(in=le, out=gt);
    Mux(a=false, b=gt, sel=instruction[0], out=pcl2);
    Or(a=pcl0, b=pcl1, out=pcl3);
    Or(a=pcl3, b=pcl2, out=pcl4);
    Mux(a=false, b=pcl4, sel=instruction[15], out=pcl5);
    PC(in=aormout, load=pcl5, inc=true, reset=reset, out[0..14]=pc);
}
